// automatically generated by the FlatBuffers compiler, do not modify

package Filter.UIManagerMsg;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Engine extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Engine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float rev() { return bb.getFloat(bb_pos + 0); }
  public int trim() { return bb.get(bb_pos + 4) & 0xFF; }
  public float temp() { return bb.getFloat(bb_pos + 8); }
  public float volt() { return bb.getFloat(bb_pos + 12); }
  public float fuel() { return bb.getFloat(bb_pos + 16); }
  public long hour() { return (long)bb.getInt(bb_pos + 20) & 0xFFFFFFFFL; }

  public static int createEngine(FlatBufferBuilder builder, float rev, int trim, float temp, float volt, float fuel, long hour) {
    builder.prep(4, 24);
    builder.putInt((int)hour);
    builder.putFloat(fuel);
    builder.putFloat(volt);
    builder.putFloat(temp);
    builder.pad(3);
    builder.putByte((byte)trim);
    builder.putFloat(rev);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Engine get(int j) { return get(new Engine(), j); }
    public Engine get(Engine obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

